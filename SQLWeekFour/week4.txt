Sums salaries by department and titlesDROP PROCEDURE sumSalariesCREATE PROCEDURE sumSalaries() SELECT 	 T.title	, D.dept_name	, SUM(S.salary)FROM employees EINNER JOIN current_dept_emp CDON CD.emp_no = E.emp_noINNER JOIN departments DON CD.dept_no = D.dept_noINNER JOIN titles TON T.emp_no = E.emp_no INNER JOIN salaries SON S.emp_no = E.emp_noGROUP BY 	 T.title	, D.dept_name	CALL sumSalaries()Pulls the top 50 employees with the title “Senior Engineer”DROP PROCEDURE get_SeniorEngineerCREATE PROCEDURE get_SeniorEngineer() SELECT E.first_name, E.last_name, T.title FROM employees E INNER JOIN titles T ON T.emp_no = E.emp_no WHERE T.title = 'Senior Engineer' LIMIT 50CALL get_SeniorEngineer()Sums the two numbersCREATE PROCEDURE sumNum(a INT, b INT) SELECT a + b AS 'sum'CALL sumNum(4,4)Pulls the most recent salary, hire date, department, title, and employee full name by only providing the ID.CREATE PROCEDURE getEmployeeInfo(getId INT) DROP PROCEDURE getEmployeeInfoCREATE PROCEDURE getEmployeeInfo(getId INT) SELECT DISTINCT E.emp_no, E.first_name, E.last_name, D.dept_name, E.hire_date, T.title, S.salary, S.from_dateFROM employees E INNER JOIN current_dept_emp CD ON CD.emp_no = E.emp_no INNER JOIN departments D ON CD.dept_no = D.dept_no INNER JOIN salaries S ON S.emp_no = E.emp_no INNER JOIN titles T ON T.emp_no = E.emp_no WHERE E.emp_no = getId ORDER BY S.from_date DESC LIMIT 1CALL getEmployeeInfo(10007)Changes based on the row from the already created view. Changes the to_date to any date you wish for it to be. DROP VIEW IF EXISTS most_recent_employee_titleCREATE VIEW most_recent_employee_titleASSELECT DISTINCT E.emp_no, E.first_name, E.last_name, D.dept_name, E.hire_date, T.title, S.salary, S.from_date, S.to_date, ROW_NUMBER() OVER (PARTITION BY E.emp_no ORDER BY S.to_date DESC) 'Row_num'FROM employees E INNER JOIN current_dept_emp CD ON CD.emp_no = E.emp_no INNER JOIN departments D ON CD.dept_no = D.dept_no INNER JOIN salaries S ON S.emp_no = E.emp_no INNER JOIN titles T ON T.emp_no = E.emp_no GROUP BY E.emp_no, E.first_name, E.last_name, D.dept_name, E.hire_date, T.title, S.salary, S.from_date, S.to_date	ORDER BY S.to_dateCREATE PROCEDURE updateSecondMostRecentTitle(IN rowNum INT, IN getDate DATE)BEGIN	IF rowNum IS NULL THENSET rowNum = 2;ELSEIF getDate IS NULL THENSET getDate = CURDATE(); END IF;UPDATE salaries S INNER JOIN most_recent_employee_title TON T.emp_no  = S.emp_no SET S.to_date = yourDateWHERE S.to_date = getDateAND T.Row_num = rowNum;END//CALL updateSecondMostRecentTitle()SELECT *FROM most_recent_employee_title